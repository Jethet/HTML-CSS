-  comments that should be ignored in HTML code:
   Use special tag to add notes that will be ignored:
     <!-- Note to self: xxx xxx -->
- meta data is not rendered but used by the server (for example: description and
  keywords are giving information that will be used by Google)

WEBPAGE STRUCTURE
-  doctype needs to be defined first in an HTML page: it tells the
   browser which version of HTML the page is using. The code is:
      <!DOCTYPE html>
      <html>
      </html>

-  head and body tags:
   a HTML page is split into two parts, head and body. The head contains
   important webpage information (title, stylesheet, script, font etc.).
   The head is the name of the website for search engines.
   The body contains the webpage content that is visible to the user.
   The code is:
     <head>
        <title>THIS IS THE TITLE</title>
        ... etc.
     </head>
     <body>
     </body>

-  footer: will be repeated for each page

HEAD:
In the head, the links to the css stylesheets should come first, above the title:
<link rel="stylesheet" href="file.css">.
The styles.css link should be the last one you add. To start with a good
layout without default values, include <link rel="stylesheet" href="reset.css">
The media attribute allows loading different stylesheets depending on the
device capabilities:
  <link href="file.css" media="screen" rel="stylesheet">
  <link href="file.css" media="print" rel="stylesheet">
Other resources than stylesheets can be added:
  RSS feed:  <link rel="alternate" type="application/rss+xml" href="file.css">
  Favicon:   <link rel="icon" sizes="180X180" href="/assets/apple-touch-icon.png">

With the <style> tag, a style can be added without loading an external stylesheet:
     <style>.some-css {}</style> (with media attribute this can be applied only
     for a specified medium, for example <style media="print">.some-css {}</style>)
With the base tag a base URL is set for all relative URLs contained in the page,
for example <base href="https://flavicon.com/">  for flavicon icons that are used.

Meta tag:
The meta tag is very important, especially for SEO. A meta element has only the
starting tag. The basic meta tag is the description that could be used by search
engines to describe the page:
   <meta name="description" content="Full explanation of healthy food">
With the charset tag the page character encoding is set, usally utf-8:
   <meta charset="utf-8">
With the robots tag the SEO bots are instructed to index a page:
   <meta name="robots" content="noindex">
or if they should follow links: <meta name="robots" content="nofollow">
Combination is possible: <meta name="robots" content="noindex, nofollow">
With viewport tag the browser is told to set the page width based on the device
width: <meta name="viewport" content="width=device-width, initial-scale=1">
With <meta http-equiv="refresh" content="3;url=http://flavicon.com/anotherpage">
as meta tag, the browser is told to wait 3 seconds before directing to the other page.

BODY:
There is only one body tag on a page (just like only one head and htlm tag).
There are two general categories of elements in the body:
  block elements: <p>, <div>, heading elements, lists and list items, etc.
  inline elements: <a>, <span>, <img>, etc.

BLOCK elements do not allow other elements on either side of them. Width/height,
margin, padding and borders of block elements can be altered. A block element can
contain an inline element or another block element.
INLINE elements can sit next to other inline elements. Width, margin etc. cannot
be altered for inline elements. Inline elements cannot contain a block element.


-  container: this is where the main content is specified, after the header.

-  elements have an opening and a closing tag, plus content. All the following are
   elements:

      heading:
      There are 6 sizes for headings. The code is:
      <h1></h1>  (usually only 1 per page: the page title)
      <h2></h2>
      etc.
      h1 defines the largest (= most important) heading and h6 the smallest.
      SEO engines recognise headings. Headings are block elements and cannot
      contain other elements.

      paragraph:
      Use <p> to put content into paragraphs. It will break up your text and
      make it easier to read for the user. Code (after code for header): <p></p>
      This is a block element. Inside it, an inline element can be added. No
      block element can be added and no p element can be nested inside a <p>.
      By default, browsers style a paragraph with a margin on top and bottom,
      adding space between two consecutive paragraphs like paragraph in text.

      <span></span> is an inline tag that can be used to create a section in a
      paragraph that can be targeted using CSS.
      <br> can be used to create a new line inside a p tag, without additional
      spacing. <br> is an inline element.

      div (= division element):
      The div is a general purpose container for other elements, to be used
      anywhere a container is needed but where an existing tag is not suited.
      A div tag groups elements together. This is useful for styling (e.g.
      giving the grouped elements the same colour). Code to wrap around elements:
      <div></div>

      article (semantic element)
      The article tag identifies self-contained and independent content in a
      page and can be reused independently, such as blog posts or newspaper
      articles. Code: <article></article>

      section (semantic element)
      A section element defines a section in a document: <section></section>
      It is useful to break a long article into different sections, for example.

NOTE: sections can have articles and articles can have sections; no precedence.

      nav
      This tag is used to create the markup that defines the page navigation.
      It is typically used with a ul or ol list. Code: <nav></nav>

      lists:
      ul: unordered list with bullets, and ol: ordered list with numbers before
      each item.  ul and ol are used with list items <li>. The code example is:
       <ol>
         <li>item 1</li>
         <li>item 2</li>
         etc.
       </ol>

       <dl> = definition list, not often used. This consists of a term <dt> and
       its definitioin <dd>, for example:
       <dl>
         <dt>John</dt>            (this will print John)
         <dd>First name</dd>      (this will print First name, on the next line
                                    and further indented than the term)

      button:
      You can use radio buttons for questions where you want the user to only give
      you one answer out of multiple options. Radio buttons are a type of input.
      Each of the radio buttons can be nested within its own label element.
      By wrapping an input element inside of a label element it will automatically
      associate the radio button input with the label element surrounding it.

      All related radio buttons should have the same name attribute to create a
      radio button group. By creating a radio group, selecting any single radio
      button will automatically deselect the other buttons within the same group
      ensuring only one answer is provided by the user.

   It is considered best practice to set a for attribute on the label element,
   with a value that matches the value of the id attribute of the input element.
   This allows assistive technologies to create a linked relationship between
   the label and the child input element.

-  Checkboxes:
   Forms commonly use checkboxes for questions that may have more than one answer.
   Checkboxes are a type of input. Each of the checkboxes can be nested within its
   own label element. By wrapping an input element inside of a label element it
   will automatically associate the checkbox input with the label element surrounding
   it. All related checkbox inputs should have the same name attribute.

   It is considered best practice to explicitly define the relationship between
   a checkbox input and its corresponding label by setting the for attribute on
   the label element to match the id attribute of the associated input element.

-  <pre></pre> all that is within these tags is respected: in this way empty
   lines can be created, for example.

-  Image
   There should be a folder for images in the project folder. The images can
   be downloaded by right clicking on a link and select 'Save as ...', and
   save the images to the image folder.
   Images have three primary attributes:
   * the <img> tag
   * the src attribute that lets the page know what image the user wants to see
   * the alt attribute that provides extra information if the image cannot be
     seen on the webpage for any reason (name image??)
   To see the image on the webpage, the image needs to be linked by telling
   the webpage where the image is and what it is called. Code:
    <div>
      <img src="images/logo.png" alt="codebar.io">
    </div>

   It is possible to link to a video and combine this with pictures.
   First the link to the video should be added (with code <a href="">) and
   images of pictures can be added under this (small indent).

TAGS
-  <strong>:
   The strong tag is used to mark the text inside it as strong. It is not a
   visual hint but a semantic hint. Its interpretation will vary depending
   on the medium but by default browsers make the text in this tag 'bold' but
   it is meant to indicate importance, not styling as with <b>.

-  <em>:
   The em tag marks the text inside it as emphasised. Browsers by default
   make this text italic. Also indicates importance, not styling as with <i>.

-  Other tags:
   <small>  makes the font smaller (size of subscript)
   <mark>   puts the text in highlight
   <ins>    makes text look as if inserted by underlining it
   <del>    makes text look deleted by crossing it out
   <sup>    puts text as superscript
   <sub>    puts text as subscript
   <i>      makes text italic
   <b>      makes text bold

-  <blockquote>:
   The blockquote tag is used to insert citations in the text. By default,
   browsers apply a margin to the blockquote text.

-  <q>: The q tag is used for inline quotes.

-  <hr>: adds a horizontal line in the page

LINKS
Links are defined by using the <a> tag and the link destination is set with
the href attribute. It is an anchor tag that contains the URL address
of the link: it is used to indicate where the user should go:
  <a href="https://..url and page of website..">..description reference..</a>

-  regular link:
   <a href="https://codebar.io">Click here</a>  ==> this is an absolute URL.
   Links also work with relative URLs by using / in the href.
   Links can include text, images or any other element but not other links.
   Example image: <a href="https://codebar.io">
                    <img src="test.jpg">
                  </a>
-  mailto link:
   A link can open up a user's email client and share content. The difference
   between regular links and mailto links is the content defined in the href
   attribute. Code:
    <a href="mailto:social&codebar.io?subject=I%20love%20owls%20::%20codebar">Email us</a>
   Note: spaces in the subject text are replaced by %20.

-  Twitter link:
   A share-on-Twitter link can be added as follows:
   <a href="https://twitter.com/home?status=I love owls! via @codebar">
      Share your love of owls on Twitter</a>

  ==> target is an anchor tag attribute that specifies where to open the
      link and the value "_blank" specifies to open the link in a new tab:
      <a target="_blank" href="http://freecodecamp.org">Freecodecamp.org</a>

RESPONSIVE LAYOUT:
<meta name="viewport" content="width=device-width, initial-scale=1.0"> (after css links)
The mobile-first approach is a way to design with consideration for the restrictions
posed by mobile phones: focus on core content and functionality, consider bandwidth.
There is a hierarchy of content, for example:
1 - site name
2 - content text
3 - resources
4 - author info

SPLIT LINES OF HTML CODE:
<code><other_code
params=...>

Attributes: key="value" syntax, such as class="", id="", src="", style=""
An id is unique in the context of a web page and cannot be duplicated.
A class can appear multiple times and hold multiple values.

defer src is used for faster path to a fast-loading page.
